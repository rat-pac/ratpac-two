////////////////////////////////////////////////////////////////////////
/// \class RAT::RooTracker_Gen
///
/// \brief Reads in RooTracker StdHep ROOT files.
///
/// \author A. Mastbaum <mastbaum@physics.rutgers.edu>
///
/// REVISION HISTORY:\n
///   11/18/2024 : A. Mastbaum - First version, based on VertexFile_Gen
///
/// \details RooTracker_Gen is used to take event vertices generated by
/// GENIE, etc. and simulate them in RAT. Usage:
///
///     /generator/add vertexfile
///     filename[:POSITION][:TIME][:NEVENTS][:NOFFSET]
///
/// Where the file is a RooTracker file. If there is no POSITION or TIME or
/// they are set to 'default' it will use the position / time given in the
/// input file for that event. It will simulate NEVENTS of the events in the
/// file, starting with event NOFFSET. If it runs out of events before you get
/// through as many as specified with /rat/run/start, it will end the
/// simulation after the completion of that event.
///
////////////////////////////////////////////////////////////////////////

#ifndef __RAT_RooTracker_Gen__
#define __RAT_RooTracker_Gen__

#include <TFile.h>
#include <TTimeStamp.h>

#include <RAT/GLG4Gen.hh>

class TTree;

namespace RAT {

namespace DS {
class Root;
}

const int kNPmax = 250;  // gNtpConv.cxx

// GENIE StdHep record, see GENIE manual arxiv:1510.05494, Sec. 7.6.2.
struct StdHepRecord {
  StdHepRecord(TTree* t) {
    t->SetBranchAddress("EvtNum", &EvtNum);
    t->SetBranchAddress("EvtXSec", &EvtXSec);
    t->SetBranchAddress("EvtDXSec", &EvtDXSec);
    t->SetBranchAddress("EvtWght", &EvtWght);
    t->SetBranchAddress("EvtProb", &EvtProb);
    t->SetBranchAddress("EvtVtx", EvtVtx);
    t->SetBranchAddress("StdHepN", &StdHepN);
    t->SetBranchAddress("StdHepPdg", StdHepPdg);
    t->SetBranchAddress("StdHepStatus", StdHepStatus);
    t->SetBranchAddress("StdHepRescat", StdHepRescat);
    t->SetBranchAddress("StdHepX4", StdHepX4);
    t->SetBranchAddress("StdHepP4", StdHepP4);
    t->SetBranchAddress("StdHepPolz", StdHepPolz);
    t->SetBranchAddress("StdHepFd", StdHepFd);
    t->SetBranchAddress("StdHepLd", StdHepLd);
    t->SetBranchAddress("StdHepFm", StdHepFm);
    t->SetBranchAddress("StdHepLm", StdHepLm);
  }

  int EvtNum;
  double EvtXSec;
  double EvtDXSec;
  double EvtWght;
  double EvtProb;
  double EvtVtx[4];
  int StdHepN;
  int StdHepPdg[kNPmax];
  int StdHepStatus[kNPmax];
  int StdHepRescat[kNPmax];
  double StdHepX4[kNPmax][4];
  double StdHepP4[kNPmax][4];
  double StdHepPolz[kNPmax][3];
  int StdHepFd[kNPmax];
  int StdHepLd[kNPmax];
  int StdHepFm[kNPmax];
  int StdHepLm[kNPmax];
};

class RooTracker_Gen : public GLG4Gen {
 public:
  RooTracker_Gen()
      : fStateStr(""), fCurrentEvent(0), fNumEvents(0), fMaxEvent(0), fLastEventTime(0), fTimeGen(0), fPosGen(0) {}

  virtual ~RooTracker_Gen() { fFile->Close(); }

  void GenerateEvent(G4Event* event);
  bool IsRepeatable() const { return true; };

  /// @param[in] offset Time reset to this value
  void ResetTime(double offset = 0.0);

  /// @param[in] state SetState state
  void SetState(G4String state);
  G4String GetState() const;

  /// specify/get parameters for time generator (eg from generator/rate/
  /// commands) overriding ROOT file
  /// @param[in] state the time generator state
  void SetTimeState(G4String state);
  G4String GetTimeState() const;

  /// specify/get parameters for time generator (eg from generator/pos commands)
  /// overriding ROOT file
  /// @param[in] state the pos generator state
  void SetPosState(G4String state);
  G4String GetPosState() const;

 protected:
  G4String fStateStr;
  int fCurrentEvent;  ///< Index of current event from ROOT file
  int fNumEvents;     ///< Read up to this many events from file
  int fMaxEvent;      ///< Number of events in ROOT file

  TTimeStamp fLastEventTime;  ///< Used to calculate time between events

  GLG4TimeGen* fTimeGen;
  GLG4PosGen* fPosGen;

  TFile* fFile;
  TTree* fTTree;
  StdHepRecord* fRec;
};

}  // namespace RAT

#endif
